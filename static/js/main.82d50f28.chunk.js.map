{"version":3,"sources":["store/actions/actionTypes.js","config/index.js","components/controls/goal.js","components/controls/year.js","components/chart/chart.utils.js","components/chart/index.js","components/chart/Chart.js","components/map/map.utils.js","components/map/index.js","components/map/Map.js","utils/index.js","app.js","store/actions/index.js","store/reducer/sdgData.js","store/reducer/index.js","reportWebVitals.js","index.js"],"names":["CHANGE_YEAR","GOALS_LIST","id","name","YEARS","Goal","goal","selectGoal","className","defaultValue","onChange","event","target","value","map","Year","onYearChange","opt","wrap","self","d3","this","textLength","node","getComputedTextLength","text","length","slice","drawAxis","container","xScale","yScale","ticks","tickSize","tickFormat","transform","scale","axis","select","remove","selectAll","attr","each","applyAxisStyles","append","call","Chart","data","dimensions","width","height","margin","svgWidth","useMemo","left","right","svgHeight","top","bottom","domain","datapoint","area_name","range","padding","getYScale","getXScale","useEffect","chartElement","enter","d","i","chartdata","find","datum","transition","duration","bandwidth","style","drawBar","drawMap","geojson","colorScale","projection","reflectY","fitExtent","path","tooltip","features","result","area_code","on","html","pageX","pageY","Map","mapRef","useRef","mean","breakpoint","rangeRound","colorGroup1","colorGroup2","colorGroup3","getColorScale","mapElement","current","x","Math","round","tickValues","legend","group","invertExtent","xDomain","pop","drawLegend","topojson","indiaTopo","objects","india","ref","getWindowDimensions","window","innerWidth","innerHeight","connect","state","error","dispatch","year","type","changeYear","controlRef","useState","setGoal","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useDimensions","dataTable","INITIAL_STATE","sdgData","action","produce","draft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","reducer","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82d50f28.chunk.js","sourcesContent":["export const CHANGE_YEAR = \"CHANGE_YEAR\";","export const GOALS_LIST = [\r\n  { id: \"SDG Index Score\", name: \"SDG Index Score\" },\r\n  { id: \"Goal 1\", name: \"No Poverty\" },\r\n  { id: \"Goal 2\", name: \"Zero Hunger\" },\r\n  { id: \"Goal 3\", name: \"Good Health\" },\r\n  { id: \"Goal 4\", name: \"Quality Education\" },\r\n  { id: \"Goal 5\", name: \"Gender Equality\" },\r\n  { id: \"Goal 6\", name: \"Clean Water and Sanitation\" },\r\n  { id: \"Goal 7\", name: \"Renewable Energy\" },\r\n  { id: \"Goal 8\", name: \"Good Jobs and Economic Growth\" },\r\n  { id: \"Goal 9\", name: \"Industry, Innovation and Infrastructure\" },\r\n  { id: \"Goal 10\", name: \"Reduced Inequalities\" },\r\n  { id: \"Goal 11\", name: \"Sustainable Cities and Communities\" },\r\n  { id: \"Goal 12\", name: \"Ensure sustainable consumption and production patterns\" },\r\n  { id: \"Goal 13\", name: \"Climate Action\" },\r\n  { id: \"Goal 14\", name: \"Conserve and sustainably use the oceans, seas and marine resources for sustainable development\" },\r\n  { id: \"Goal 15\", name: \"Life on Land\" },\r\n  { id: \"Goal 16\", name: \"Peace, Justice and Strong Institutions\" },\r\n];\r\n\r\nexport const YEARS = [2020, 2019, 2018];\r\n","import React from \"react\";\r\nimport { GOALS_LIST } from \"../../config\";\r\n\r\nexport default function Goal({ goal, selectGoal }) {\r\n  return (\r\n    <div className=\"goal\">\r\n      <h4>Select Goal</h4>\r\n      <select  defaultValue={goal} onChange={event => selectGoal(event.target.value)}>\r\n        {GOALS_LIST.map(goal => (\r\n          <option key={goal.id} value={goal.id}>{goal.name}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { YEARS } from \"../../config\";\r\n\r\nexport default function Year({ onYearChange }) {\r\n  return (\r\n    <div className=\"year\">\r\n      <h4>Select Year</h4>\r\n      <select defaultValue={YEARS[0]} onChange={event => onYearChange(event.target.value)}>\r\n        {YEARS.map((opt) => (\r\n          <option key={opt} value={opt}>{opt}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\n\r\n/**\r\n * wrap: function\r\n * To truncate long words in an axis' label\r\n */\r\nfunction wrap() {\r\n    const textWidth = 90;\r\n    var self = d3.select(this),\r\n        textLength = self.node().getComputedTextLength(),\r\n        text = self.text();\r\n  \r\n    while(textLength > (textWidth) && text.length > 0) {\r\n        text = text.slice(0, -1);\r\n        self.text(text + '...');\r\n        textLength = self.node().getComputedTextLength();\r\n    }\r\n}\r\n\r\n/**\r\n * getXScale: function\r\n * @param width\r\n */\r\nexport function getXScale(width) {\r\n    return d3.scaleLinear()\r\n        .domain([0, 100])\r\n        .range([0, width]);\r\n}\r\n\r\n/**\r\n * getYScale: function\r\n * @param data\r\n * @param height\r\n */\r\nexport function getYScale(data, height) {\r\n    return d3.scaleBand()\r\n        .domain(data.map(datapoint => datapoint.area_name))\r\n        .range([0, height])\r\n        .padding(0.4);\r\n}\r\n\r\n/**\r\n * applyAxisStyles: function\r\n * @param container\r\n */\r\nfunction applyAxisStyles(container) {\r\n    container.select(\".domain\").remove();\r\n    container.selectAll(\"line\").attr(\"stroke\", \"rgba(12, 12, 12, 0.2\");\r\n    return container.selectAll(\"text\")\r\n        .attr(\"opacity\", 0.5)\r\n        .attr(\"color\", \"black\")\r\n        .attr(\"font-size\", \"0.75rem\")\r\n        .each(wrap);\r\n}\r\n\r\n/**\r\n * drawAxis: function\r\n * @param container\r\n * @param xScale\r\n * @param yScale\r\n * @param ticks\r\n * @param tickSize\r\n * @param tickFormat\r\n * @param transform\r\n */\r\nexport function drawAxis({ container, xScale, yScale, ticks, tickSize, tickFormat, transform}) {\r\n    const scale = xScale || yScale;\r\n    const axisType = xScale ? d3.axisBottom : d3.axisLeft;\r\n\r\n    const axis = axisType(scale)\r\n        .ticks(ticks)\r\n        .tickSize(tickSize)\r\n        .tickFormat(tickFormat);\r\n    \r\n    const axisGroup = container.append(\"g\")\r\n        .attr(\"class\", \"axis\")\r\n        .attr(\"transform\", transform)\r\n        .call(axis);\r\n\r\n    return applyAxisStyles(axisGroup);\r\n}\r\n\r\n/**\r\n * drawBar: function\r\n * @param {Object}\r\n * @returns \r\n */\r\nexport function drawBar({ container, data, goal, xScale, yScale }) {\r\n    return container.selectAll('rect')\r\n        .data(data)\r\n        .enter()\r\n        .append('rect')\r\n        .attr('data-state', (d, i) => data[i].area_name)\r\n        .attr('data-index', (d, i) => data[i].chartdata.find(datum => datum.name === goal)?.value)\r\n        .attr('class', 'bar')\r\n        .attr('x', 0)\r\n        .attr('y', (d, i) => yScale(data[i].area_name))\r\n        .attr('width', 0)\r\n        .transition()\r\n        .duration(750)\r\n        .attr('width', (d, i) => xScale(data[i].chartdata.find(datum => datum.name === goal)?.value))\r\n        .attr('height', yScale.bandwidth())\r\n        .style('fill', '#33adff');\r\n}","import Chart from './Chart';\r\nexport default Chart;","import React, { useEffect, useMemo } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { getXScale, getYScale, drawAxis, drawBar } from \"./chart.utils\";\r\n\r\n\r\nexport default function Chart({ data = [], goal, dimensions = {} }) {\r\n  const { width, height, margin } = dimensions;\r\n  const svgWidth = useMemo(() => width + margin.left + margin.right, [margin.left, margin.right, width]);\r\n  const svgHeight = useMemo(() => height + margin.top + margin.bottom, [height, margin.bottom, margin.top]);\r\n  const yScale = useMemo(() => getYScale(data, height), [data, height]);\r\n  const xScale = useMemo(() => getXScale(width), [width]);\r\n\r\n  useEffect(() => {\r\n    // Create root container where we append all other chart elements.\r\n    const chartElement = d3.select(\".chart-container\");\r\n    chartElement.selectAll(\".axis\").remove();  // Clear svg content before adding new elements\r\n\r\n    // Draw X axis\r\n    drawAxis({\r\n      xScale,\r\n      container: chartElement,\r\n      tickSize: -height,\r\n      ticks: 5,\r\n      transform: `translate(0,${height})`\r\n    });\r\n\r\n    // Draw Y Axis\r\n    drawAxis({\r\n      yScale,\r\n      container: chartElement,\r\n      tickSize: -width,\r\n    });\r\n  }, [height, margin.bottom, width, xScale, yScale])\r\n    \r\n  useEffect(() => {\r\n    // Create root container where we append all other chart elements.\r\n    const chartElement = d3.select(\".chart-container\");\r\n    chartElement.selectAll(\"rect\").remove();  // Clear svg content before adding new elements\r\n\r\n    drawBar({\r\n      container: chartElement,\r\n      data,\r\n      goal,\r\n      xScale,\r\n      yScale,\r\n    })\r\n  }, [data, goal, xScale, yScale])\r\n\r\n  return (\r\n    <svg className=\"chart\" width={svgWidth} height={svgHeight}>\r\n      <g className=\"chart-container\" transform={`translate(${margin.left},${margin.top})`} />\r\n    </svg>\r\n  );\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\n\r\n/**\r\n * getColorScale: Function\r\n * Get Color Scale in relation to provided mean, constant final value and provided color range.\r\n * @param mean\r\n * @param colorGroup1,\r\n * @param colorGroup2,\r\n * @param colorGroup3\r\n */\r\nexport function getColorScale(mean, colorGroup1, colorGroup2, colorGroup3) {\r\n    return d3.scaleThreshold()\r\n        .domain([mean, 99])\r\n        .range([colorGroup1, colorGroup2, colorGroup3]);\r\n}\r\n\r\n/**\r\n * getXScale: Function\r\n * Get X Scale in relation to provided mean, width and an optional breakpoint value for view defaulting to 40.\r\n * @param mean\r\n * @param width,\r\n * @param breakpoint,\r\n */\r\nexport function getXScale(mean, width, breakpoint = 40) {\r\n    return d3.scaleLinear()\r\n        .domain([0, mean, 99, 100])\r\n        .rangeRound([width - (breakpoint * 2), width - breakpoint, width, width + breakpoint]);\r\n}\r\n\r\n/**\r\n * drawLegend: Function\r\n * draws a key/legend that changes according to mean of the data.\r\n * @param container\r\n * @param mean\r\n * @param xScale\r\n * @param colorScale\r\n */\r\nexport function drawLegend({ container, mean, xScale, colorScale }) {\r\n    const axis = d3.axisBottom(xScale)\r\n        .tickSize(12)\r\n        .tickFormat(x => Math.round(x) + \"%\")\r\n        .tickValues([0, mean, 99, 100]);\r\n\r\n    const legend = container.append(\"g\")\r\n        .attr(\"id\", \"map-legend\")\r\n        .attr(\"transform\", \"translate(0,40)\");\r\n\r\n    legend.selectAll(\"rect\")\r\n        .data(colorScale.range().map(group => {\r\n            group = colorScale.invertExtent(group); // Get the respective domain values of color groups in range.\r\n            let xDomain = [...xScale.domain()]\r\n            // For edge cases with undefined values\r\n            if(!group[0]) group[0] = xDomain[0]\r\n            if(!group[1]) group[1] = xDomain.pop() // Last value of the domain.\r\n\r\n            return group;\r\n        }))\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"height\", 8)\r\n        .attr(\"x\", d => xScale(d[0]))\r\n        .attr(\"width\", d => xScale(d[1]) - xScale(d[0]))\r\n        .attr(\"fill\", d => colorScale(d[0]));\r\n\r\n    legend.append(\"text\")\r\n        .attr(\"class\", \"caption\")\r\n        .attr(\"x\", xScale.range()[0])\r\n        .attr(\"y\", -6)\r\n        .attr(\"fill\", \"#111\")\r\n        .attr(\"text-anchor\", \"start\")\r\n        .attr(\"font-weight\", \"bold\");\r\n\r\n    return legend.call(axis)\r\n        .select(\".domain\").remove();\r\n}\r\n\r\nconst makeTooltip = () => d3.select(\"body\")\r\n    .append(\"div\")\r\n    .attr(\"class\", \"tooltip\")\r\n    .style(\"opacity\", 0)\r\n    .style(\"display\", \"none\");\r\n\r\n/**\r\n * drawMap: function\r\n * Draws the map and fills appropriate colour in states.\r\n * @param container\r\n * @param geojson\r\n * @param width\r\n * @param height\r\n * @param data\r\n * @param goal\r\n * @param colorScale\r\n */\r\nexport function drawMap({ container, geojson, width, height, data, goal, colorScale }) {\r\n    const projection = d3.geoIdentity()\r\n        .reflectY(true)\r\n        .fitExtent([[5,0], [width,height]], geojson);\r\n    \r\n    const path = d3.geoPath()\r\n        .projection(projection);\r\n\r\n    const tooltip = makeTooltip();\r\n\r\n    return container.append('g')\r\n        .attr('class', 'states')\r\n        .selectAll('path')\r\n        .data(geojson.features)\r\n        .enter()\r\n        .append('path')\r\n        .attr('class', 'state')\r\n        .attr('data-area-code', d => d.id)\r\n        .attr('data-sdg', d => {\r\n            let result = data.find(datum => datum.area_code === d.id)\r\n            if(result) {\r\n                return result.chartdata.find(datum => datum.name === goal)?.value\r\n            }\r\n            return 1;\r\n        })\r\n        .attr('fill', d => {\r\n            let result = data.find(datum => datum.area_code === d.id)\r\n            if(result) {\r\n                return colorScale(result.chartdata.find(datum => datum.name === goal)?.value)\r\n            }\r\n            // Could not find a match for that place id\r\n            return null;\r\n        })\r\n        .attr('d', path)\r\n        .on('mouseover', (event, d) => {\r\n            tooltip.style('opacity', 0.9)\r\n            .html(() => {\r\n                let result = data.find(datum => datum.area_code === d.id);\r\n                if(result) \r\n                return `${result.area_name}: ${result.chartdata.find(datum => datum.name === goal)?.value}%`;\r\n                \r\n                return 1;\r\n            })\r\n            .style(\"display\", \"block\")\r\n            .style('left', `${event.pageX + 10}px`)\r\n            .style('top', `${event.pageY - 20}px`);\r\n        })\r\n        .on('mouseout', () => {\r\n            tooltip.style('opacity', 0);\r\n        });\r\n}","import Map from './Map';\r\nexport default Map;","import React, { useEffect, useRef, useMemo } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson-client\";\r\nimport indiaTopo from \"../../data/india.topo.json\";\r\nimport { getColorScale, getXScale, drawLegend, drawMap } from \"./map.utils\";\r\n\r\n\r\nconst colorGroup1 = \"#f22f30\";\r\nconst colorGroup2 = \"#62a049\";\r\nconst colorGroup3 = \"#6237fe\";\r\n\r\nexport default function Map({ data = [], goal, dimensions = {} }) {\r\n  const mapRef = useRef(null);\r\n  const { width, height, margin } = dimensions;\r\n  const svgWidth = useMemo(() => width + margin.left + margin.right, [margin.left, margin.right, width]);\r\n  const svgHeight = useMemo(() => height + margin.top + margin.bottom, [height, margin.bottom, margin.top]);\r\n\r\n  const mean = useMemo(() => d3.mean(data?.map(datapoint => datapoint.chartdata.find(datum => datum.name === goal)?.value) || []), [data, goal]);\r\n  const xScale = useMemo(() => getXScale(mean, width), [mean, width]);\r\n  const colorScale = useMemo(() => getColorScale(mean, colorGroup1, colorGroup2, colorGroup3), [mean]);\r\n\r\n  useEffect(() => {\r\n    // Create root container where we append all other chart elements.\r\n    const mapElement = d3.select(mapRef.current);\r\n    mapElement.selectAll(\"#map-legend\").remove();  // Clear svg content before adding new elements\r\n\r\n    drawLegend({\r\n      container: mapElement,\r\n      mean,\r\n      xScale,\r\n      colorScale\r\n    });\r\n  }, [colorScale, mean, xScale]);\r\n\r\n  useEffect(() => {\r\n    // Create root container where we append all other chart elements.\r\n    const mapElement = d3.select(mapRef.current);\r\n    mapElement.selectAll(\"path\").remove();  // Clear svg content before adding new elements\r\n    mapElement.selectAll(\".tooltip\").remove();\r\n\r\n    drawMap({\r\n      container: mapElement,\r\n      geojson: topojson.feature(indiaTopo, indiaTopo.objects.india),\r\n      width: svgWidth,\r\n      height: svgHeight,\r\n      data,\r\n      goal,\r\n      colorScale\r\n    });\r\n  }, [colorScale, data, goal, svgHeight, svgWidth])\r\n\r\n  return (\r\n    <svg ref={mapRef} className=\"map\" width={svgWidth} height={svgHeight} />\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// Referenced from: https://stackoverflow.com/a/36862446\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\nexport function useDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n\r\n","import React, { useState, useRef, useMemo } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { changeYear } from './store/actions';\r\nimport Goal from \"./components/controls/goal\";\r\nimport Year from \"./components/controls/year\";\r\nimport Chart from \"./components/chart\";\r\nimport Map from \"./components/map\";\r\nimport { useDimensions } from './utils';\r\nimport { GOALS_LIST } from \"./config\";\r\nimport \"./app.scss\";\r\n\r\n\r\nconst headerOffset = 203;\r\n/**\r\n * App: Functional Component\r\n * @param data - From redux\r\n * @param error\r\n * @param onYearChange - dispatch action\r\n */\r\nfunction App({ data, error, onYearChange }) {\r\n  const controlRef = useRef(null);\r\n  const [goal, setGoal] = useState(GOALS_LIST[0].id);\r\n  const { width, height } = useDimensions();\r\n\r\n  /*\r\n    Height compensates for the header with title and controls.\r\n    Can improve with header's reference-based offsetHeight compensation\r\n  */\r\n  const dimensions = useMemo(() => ({\r\n    width: (width / 2.0) - 130,\r\n    height: height - (headerOffset + 30 + 30),\r\n    margin: { top: 30, right: 30, bottom: 30, left: 100 }\r\n  }), [width, height]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='header'>\r\n        <h1>Social Development Index</h1>\r\n        <div ref={controlRef} className=\"control\">\r\n          <Goal goal={goal} selectGoal={setGoal} />\r\n          <Year onYearChange={onYearChange} />\r\n        </div>\r\n      </div>\r\n      {\r\n        error ? (\r\n          <div className='error'>\r\n            {error}\r\n          </div>\r\n        ) : (\r\n          <div className='main'>\r\n            <Chart data={data} goal={goal} dimensions={dimensions} />\r\n            <Map data={data} goal={goal} dimensions={dimensions} />\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state.data,\r\n  error: state.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onYearChange: (year) => dispatch(changeYear(year))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_YEAR } from \"./actionTypes\";\r\n\r\n/**\r\n * changeYear: action\r\n * Receives year value and returns to reducer to use appropriate year's data.\r\n * @param year\r\n */\r\nexport const changeYear = (year) => ({\r\n    type: CHANGE_YEAR,\r\n    year,\r\n    error: !year ? 'Error: No Year Provided' : null\r\n})","import produce from 'immer';\r\nimport { CHANGE_YEAR } from \"../actions/actionTypes\"\r\nimport data2018 from \"../../data/2018.json\";\r\nimport data2019 from \"../../data/2019.json\";\r\nimport data2020 from \"../../data/2020.json\";\r\nimport { YEARS } from \"../../config\"\r\n\r\n// Consolidated Data in an object table indexed to respective years\r\nconst dataTable = {\r\n  2018: data2018,\r\n  2019: data2019,\r\n  2020: data2020\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n    data: dataTable[YEARS[0]],\r\n    error: \"\"\r\n};\r\n\r\nconst sdgData = (state = INITIAL_STATE, action) => produce(state, draft => {\r\n    switch(action.type) {\r\n        case CHANGE_YEAR:\r\n            draft.data = dataTable[action.year];\r\n            draft.error = action.error;\r\n            break;\r\n\r\n        default:\r\n            // Immer takes care of returning state\r\n            break;\r\n    }\r\n});\r\n\r\nexport default sdgData;","import sdgData from './sdgData';\r\nexport default sdgData;","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport \"./index.css\";\r\nimport App from \"./app\";\r\nimport reducer from './store/reducer';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst store = createStore(reducer)\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}